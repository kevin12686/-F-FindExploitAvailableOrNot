import org.jdom2.*;
import org.jdom2.input.*;
import java.io.*;
import java.util.List;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFCell;

public class FindTool {
	
	private SAXBuilder SAX;
	private Document DocJDOM;
	private Element EltRoot;
	//private FileWriter Output;
	private FileOutputStream FOSout;
	private HSSFWorkbook Workbook;
	private HSSFSheet Sheet;
	private HSSFRow Row;
	private HSSFCell Cell;
	private int Sheetcount;
	private boolean FilterOrNot;
	
	FindTool(String source, String output) throws JDOMException, IOException{
		
		this.SAX = new SAXBuilder();
		this.DocJDOM = this.SAX.build(new File(source));
		this.EltRoot = this.DocJDOM.getRootElement();
		/*
		this.Output = new FileWriter(output);
		this.Output.write("IP / PluginID / exploit_available\r\n");
		*/
		this.FOSout = new FileOutputStream(output);
		this.Workbook = new HSSFWorkbook();
		this.Sheet = this.Workbook.createSheet();
		this.Row = this.Sheet.createRow(0);
		this.Cell = this.Row.createCell(0);
		this.Cell.setCellValue("IP");
		this.Cell = this.Row.createCell(1);
		this.Cell.setCellValue("PluginID");
		this.Cell = this.Row.createCell(2);
		this.Cell.setCellValue("Exploit_Available");
		this.Sheetcount = 1;
		this.FilterOrNot = false;
	}
	
	public void setFilter(boolean turn){
		this.FilterOrNot = turn;
	}
	
	public void FindExploitAvailable() throws IOException{
		
		Element EltReport = this.EltRoot.getChild("Report");
		List<Element> lEltReportHost = EltReport.getChildren();
		Filter filter = null;
		String IP, PluginID, ExploitTF;
		//String OutputStr;
		for(int i = 0; i < lEltReportHost.size(); i++){
			
			if(this.FilterOrNot)	filter = new Filter();
			Element EltReportHost = (Element)lEltReportHost.get(i);
			IP = EltReportHost.getAttributeValue("name");
			List<Element> lEltReportItem = EltReportHost.getChildren();
			
			for(int j = 0; j < lEltReportItem.size(); j++){
				
				Element EltReportItem = (Element)lEltReportItem.get(j);
				PluginID = EltReportItem.getAttributeValue("pluginID");
				ExploitTF = EltReportItem.getChildText("exploit_available");
				
				if(!(PluginID == null || ExploitTF == null)){
					/*
					OutputStr = " " + IP + "  " + PluginID + "  " + ExploitTF + "\r\n";
					System.out.print(OutputStr);
					//this.Output.write(OutputStr);
					*/
					if(ExploitTF.isEmpty())	ExploitTF = "N/A";
					
					
					if(!this.FilterOrNot){
						
						this.Row = this.Sheet.createRow(this.Sheetcount);
						this.Cell = this.Row.createCell(0);
						this.Cell.setCellValue(IP);
						this.Cell = this.Row.createCell(1);
						this.Cell.setCellValue(PluginID);
						this.Cell = this.Row.createCell(2);
						this.Cell.setCellValue(ExploitTF);
						this.Sheetcount ++;
					}
					else{
						
						String list[] = {PluginID, ExploitTF};
						if(!filter.Match(list)){
							
							filter.AddData(list);
							
							this.Row = this.Sheet.createRow(this.Sheetcount);
							this.Cell = this.Row.createCell(0);
							this.Cell.setCellValue(IP);
							this.Cell = this.Row.createCell(1);
							this.Cell.setCellValue(PluginID);
							this.Cell = this.Row.createCell(2);
							this.Cell.setCellValue(ExploitTF);
							this.Sheetcount ++;
						}
					}
				}
			}
		}
	}
	
	public void close() throws IOException{
		//this.Output.close();
		this.Workbook.write(this.FOSout);
		this.FOSout.flush();
		this.FOSout.close();
	}
}
